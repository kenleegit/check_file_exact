#!/usr/bin/perl -w

# check_file_exact.pl adapted from check_file_age.pl by Steven Grimm <koreth-nagios@midwinter.com>
#
# Checks a file's size. Raise alerts if it is the designated size. (Modified from check_file_age)
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# you should have received a copy of the GNU General Public License
# along with this program (or with Nagios);  if not, write to the
# Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, 
# Boston, MA 02110-1301, USA

use strict;
use English;
use Getopt::Long;
use File::stat;
use vars qw($PROGNAME);
use FindBin;
use lib "$FindBin::Bin";
use lib '/usr/lib64/nagios/plugins';
use utils qw (%ERRORS &print_revision &support);

sub print_help ();
sub print_usage ();

my ($opt_f, $opt_C, $opt_h, $opt_V, $opt_i);
my ($result, $message, $size, $st, $perfdata, $output, @filelist, $filename);

$PROGNAME="check_file_exact";

$ENV{'PATH'}='/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin';
$ENV{'BASH_ENV'}=''; 
$ENV{'ENV'}='';

$opt_C = "";
$opt_f = "";

Getopt::Long::Configure('bundling');
GetOptions(
	"V"   => \$opt_V, "version"	=> \$opt_V,
	"h"   => \$opt_h, "help"	=> \$opt_h,
	"i"   => \$opt_i, "ignore-missing"	=> \$opt_i,
	"f=s" => \$opt_f, "file"	=> \$opt_f,
	"C=f" => \$opt_C, "critical-size=f" => \$opt_C);

if ($opt_V) {
	print_revision($PROGNAME, '0.0.1');
	exit $ERRORS{'OK'};
}

if ($opt_h) {
	print_help();
	exit $ERRORS{'OK'};
}

$opt_f = shift unless ($opt_f);

if (! $opt_C) {
	print "FILE_EXACT UNKNOWN: No size specified\n";
	exit $ERRORS{'UNKNOWN'};
}

if (! $opt_f) {
	print "FILE_EXACT UNKNOWN: No file specified\n";
	exit $ERRORS{'UNKNOWN'};
}

$opt_f = '"' . $opt_f . '"' if $opt_f =~ / /;

# Check that file(s) exists (can be directory or link)
$perfdata = "";
$output = "";
@filelist = glob($opt_f);

foreach $filename (@filelist) {
	unless (-e $filename) {
		if ($opt_i) {
			$result = 'OK';
			print "FILE_EXACT $result: $filename doesn't exist, but ignore-missing was set\n";
			exit $ERRORS{$result};

		} else {
			print "FILE_EXACT CRITICAL: File not found - $filename\n";
			exit $ERRORS{'CRITICAL'};
		}
	}

	$st = File::stat::stat($filename);
	$size = $st->size;
	$perfdata = $perfdata . "size=${size}B;${opt_C} ";

	$result = 'OK';

	if ($opt_C !=  $size ) {
		$result = 'CRITICAL';
	}

	$output = $output . "FILE_EXACT $result: $filename is $size bytes ";

}

print "$output | $perfdata\n";

exit $ERRORS{$result};

sub print_usage () {
	print "Usage:\n";
	print "  $PROGNAME [-C <size>] [-i] -f <file>\n";
	print "  $PROGNAME [-h | --help]\n";
	print "  $PROGNAME [-V | --version]\n";
}

sub print_help () {
	print_revision($PROGNAME, '0.0.1');
	print "Copyright (c) 2018\n\n";
	print_usage();
	print "\n";
	print "  -i | --ignore-missing :  return OK if the file does not exist\n";
	print "  <size>  File must be this many bytes long\n";
	print "\n";
	support();
}
